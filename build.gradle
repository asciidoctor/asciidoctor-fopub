apply plugin: 'application'

group = 'org.asciidoctor'
version = '1.0.0-SNAPSHOT'

repositories {
  mavenCentral()
  mavenLocal() // snags valid artifacts from local Maven repository
}

configurations {
  dist
}

dependencies {
  // xml-resolver needed to fix buggy resolver in JDK
  runtime 'xml-resolver:xml-resolver:1.2'
  // avalon dependencies need to be specified to align with version available
  compile 'org.apache.avalon.framework:avalon-framework-api:4.3.1'
  compile 'org.apache.avalon.framework:avalon-framework-impl:4.3.1'
  compile 'org.apache.xmlgraphics:fop:2.1'
  runtime 'net.sourceforge.jeuclid:jeuclid-fop:3.1.9'
  runtime 'net.sf.xslthl:xslthl:2.1.0'
  // To enable hyphenation, uncomment the next line, then run `./gradlew clean` then use `./fopub`
  runtime 'net.sf.offo:fop-hyph:2.0'
  //dist 'net.sf.docbook:docbook-xsl:1.78.0:ns-resources@zip'
}

mainClassName = 'org.apache.fop.cli.Main'
applicationDefaultJvmArgs = ['-Dxml.catalog.files=APP_DIR/catalog.xml']
//applicationDefaultJvmArgs = ['-Dxml.catalog.files=/etc/xml/catalog']

installApp {
  destinationDir = file("$buildDir/${project.name}")
}

task downloadDocbookXsl(type: Download) {
  url = 'http://downloads.sourceforge.net/project/docbook/docbook-xsl-ns/1.79.1/docbook-xsl-ns-1.79.1.zip'
  destinationFile = file("$buildDir/docbook-xsl-ns-1.79.1.zip")
}

task extractDocbookXsl(type: Copy, dependsOn: downloadDocbookXsl) {
  // if ony 1.79.1 were available in the Maven repository :(
  //def archive = null
  //configurations.dist.each { File file ->
  //  if (file.name.endsWith('.zip')) {
  //    archive = file
  //    return
  //  }
  //}
  def archive = file("$buildDir/docbook-xsl-ns-1.79.1.zip")

  def outputDir = file("$buildDir/unpacked/docbook")
  // extract zip, stripping root directory
  from(zipTree(archive)) {
    eachFile { details ->
      details.path = details.path.substring(details.relativePath.segments[0].length())
    }
  }
  into outputDir
}

task downloadDocbookXml(type: Download) {
  url = 'http://maven-us.nuxeo.org/nexus/content/repositories/public/docbook/docbook-xml/4.5/docbook-xml-4.5.jar'
  destinationFile = file("$buildDir/docbook-xml-4.5.jar")
}

task extractDocbookXml(type: Copy, dependsOn: downloadDocbookXml) {
  def archive = file("$buildDir/docbook-xml-4.5.jar")
  def outputDir = file("$buildDir/unpacked/docbook-dtds")
  from(zipTree(archive))
  into outputDir
}

// put the official DocBook resources (XSL, images, etc) into the dist
applicationDistribution.from(extractDocbookXsl) {
  into "docbook"
}

// put the DocBook DTDs into the dist
applicationDistribution.from(extractDocbookXml) {
  into "docbook/xml-dtd-4.5"
}

class Download extends DefaultTask {
  @Input
  String url

  @OutputFile
  File destinationFile

  @TaskAction
  def downloadFile() {
    destinationFile.bytes = new URL(url).bytes
  }
}

CreateStartScripts startScripts = project.startScripts
startScripts.with {
  doLast {
    unixScript.text = unixScript.text.replaceFirst('APP_DIR', '\\$APP_DIR')
    windowsScript.text = windowsScript.text.replaceFirst('APP_DIR', '%APP_HOME%')
    unixScript.text = unixScript.text.replaceFirst('CLASSPATH=',
             'CLASSPATH=\\$APP_HOME/docbook/extensions/xalan27.jar:')
    windowsScript.text = windowsScript.text.replaceFirst('CLASSPATH=',
             'CLASSPATH=%APP_HOME%\\\\docbook\\\\extensions\\\\xalan27.jar;')
  }
}
